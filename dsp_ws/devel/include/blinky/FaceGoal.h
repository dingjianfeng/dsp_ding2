// Generated by gencpp from file blinky/FaceGoal.msg
// DO NOT EDIT!


#ifndef BLINKY_MESSAGE_FACEGOAL_H
#define BLINKY_MESSAGE_FACEGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace blinky
{
template <class ContainerAllocator>
struct FaceGoal_
{
  typedef FaceGoal_<ContainerAllocator> Type;

  FaceGoal_()
    : display_type()
    , h1_text()
    , h2_text()
    , question()
    , choices()  {
    }
  FaceGoal_(const ContainerAllocator& _alloc)
    : display_type(_alloc)
    , h1_text(_alloc)
    , h2_text(_alloc)
    , question(_alloc)
    , choices(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _display_type_type;
  _display_type_type display_type;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _h1_text_type;
  _h1_text_type h1_text;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _h2_text_type;
  _h2_text_type h2_text;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _question_type;
  _question_type question;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _choices_type;
  _choices_type choices;


    static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  DEFAULT;
     static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  DISPLAY_MESSAGE;
     static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  ASK_CHOICE;
 

  typedef boost::shared_ptr< ::blinky::FaceGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::blinky::FaceGoal_<ContainerAllocator> const> ConstPtr;

}; // struct FaceGoal_

typedef ::blinky::FaceGoal_<std::allocator<void> > FaceGoal;

typedef boost::shared_ptr< ::blinky::FaceGoal > FaceGoalPtr;
typedef boost::shared_ptr< ::blinky::FaceGoal const> FaceGoalConstPtr;

// constants requiring out of line definition

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      FaceGoal_<ContainerAllocator>::DEFAULT =
        
          "default"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      FaceGoal_<ContainerAllocator>::DISPLAY_MESSAGE =
        
          "displayMessage"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      FaceGoal_<ContainerAllocator>::ASK_CHOICE =
        
          "askMultipleChoice"
        
        ;
   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::blinky::FaceGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::blinky::FaceGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace blinky

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'blinky': ['/home/dsp/dsp_ws/devel/share/blinky/msg'], 'actionlib_msgs': ['/opt/ros/indigo/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::blinky::FaceGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::blinky::FaceGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::blinky::FaceGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::blinky::FaceGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::blinky::FaceGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::blinky::FaceGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::blinky::FaceGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "982c53d2a7301939450af501833b474b";
  }

  static const char* value(const ::blinky::FaceGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x982c53d2a7301939ULL;
  static const uint64_t static_value2 = 0x450af501833b474bULL;
};

template<class ContainerAllocator>
struct DataType< ::blinky::FaceGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "blinky/FaceGoal";
  }

  static const char* value(const ::blinky::FaceGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::blinky::FaceGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
string display_type # See display type constants.\n\
string h1_text # Large, headline text.\n\
string h2_text # Regular-sized text.\n\
string question # The question to ask to the user.\n\
string[] choices # Choices for multiple choice question.\n\
\n\
# Display types.\n\
string DEFAULT = default\n\
string DISPLAY_MESSAGE = displayMessage\n\
string ASK_CHOICE = askMultipleChoice\n\
";
  }

  static const char* value(const ::blinky::FaceGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::blinky::FaceGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.display_type);
      stream.next(m.h1_text);
      stream.next(m.h2_text);
      stream.next(m.question);
      stream.next(m.choices);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FaceGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::blinky::FaceGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::blinky::FaceGoal_<ContainerAllocator>& v)
  {
    s << indent << "display_type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.display_type);
    s << indent << "h1_text: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.h1_text);
    s << indent << "h2_text: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.h2_text);
    s << indent << "question: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.question);
    s << indent << "choices[]" << std::endl;
    for (size_t i = 0; i < v.choices.size(); ++i)
    {
      s << indent << "  choices[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.choices[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // BLINKY_MESSAGE_FACEGOAL_H
